# -*- coding: utf-8 -*-
"""PCOS Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pawT4qW6SGwWX8wGt-T9MUX0nXt11CGg

Importing the dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collecting and Processing"""

# loading the csv data to a Pandas DataFrame
pcos_data = pd.read_csv('/content/PCOS_data.csv')

pcos_data.head()

# print last 5 rows of the dataset
pcos_data.tail()

# number of rows and columns in the dataset
pcos_data.shape

# getting some info about the data
pcos_data.info()

# checking for missing values
pcos_data.isnull().sum()

# statistical measures about the data
pcos_data.describe()

# checking the distribution of Target Variable
pcos_data['PCOS'].value_counts()

"""Splitting the features and PCOS

1 --> PCOS Infected
0 --> PCOS not infected
"""

X = pcos_data.drop(columns='PCOS', axis=1)
Y = pcos_data['PCOS']

print(X)

print(Y)

"""Splitting the Data into Training data & Test Data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training

Logistic Regression
"""

model = LogisticRegression()

# training the LogisticRegression model with Training data
model.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

# accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on Training data : ', training_data_accuracy)

# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on Test data : ', test_data_accuracy)

"""Building a Predictive System"""

input_data = (25, 64, 156, 26.3, 11, 70, 18, 11.2, 2, 6, 6,0, 0, 39, 34, 0.87, 0, 0, 0, 0, 0, 0, 0, 110, 80 )

# change the input data to a numpy array
input_data_as_numpy_array= np.asarray(input_data)

# reshape the numpy array as we are predicting for only on instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]== 0):
  print('The Person does not have a PCOS Disease')
else:
  print('The Person has PCOS Disease')

import pickle

filename = 'pcos_model.sav'
pickle.dump(model, open(filename, 'wb'))

#loading the saved model
loaded_model = pickle.load(open('pcos_model.sav', 'rb'))

input_data = (25, 64, 156, 26.3, 11, 70, 18, 11.2, 2, 6, 6,0, 0, 39, 34, 0.87, 0, 0, 0, 0, 0, 0, 0, 110, 80 )

# change the input data to a numpy array
input_data_as_numpy_array= np.asarray(input_data)

# reshape the numpy array as we are predicting for only on instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = loaded_model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]== 0):
  print('The Person does not have a PCOS Disease')
else:
  print('The Person has PCOS Disease')

for column in X.columns:
  print(column)